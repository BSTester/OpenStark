from handlers.common import BaseHandler, authenticated_asyncfrom tornado import genfrom tornado.web import app_log as logfrom handlers.common import AddLogsimport jsonimport uuidimport time"""知识库相关接口"""class KnowledgeHandler(BaseHandler):    @authenticated_async    @gen.coroutine    def get(self, op=None, do=None):        AddLogs().add_logs(ip=self.request.remote_ip)        if op == 'online':            msg = yield self.__get_online(do)        elif op == 'cate':            msg = yield self.__get_cate()        elif op == 'book':            msg = yield self.__get_blog(do)        else:            msg = dict(status='FAIL', message='操作类型错误!', data='')        self.write_json(msg)    @gen.coroutine    def __get_blog(self, do='list'):        if do == 'list':            cate_id = self.get_argument('cateId', None)            if cate_id is not None:                blog, total = yield self.project.get_projects_list(p_type='knowledge.book', team_id=cate_id)                blog_list = list()                blog_content = dict()                for bg in blog:                    desc = json.loads(bg.config)                    if bg.status == 0 and desc.get('uid') != self.current_user.id:                        continue                    blog_list.append(dict(id=str(bg.id), title=desc.get('title')))                    team = json.loads(bg.team or '{"upId": 0}')                    blog_content['bid'] = bg.id                    blog_content['title'] = desc.get('title')                    blog_content['blog'] = desc.get('blog')                    blog_content['uid'] = desc.get('uid')                    blog_content['cid'] = [team['upId'], bg.teamId]                    blog_content['publishTime'] = bg.createTime.strftime('%Y-%m-%d %H:%M:%S')                    blog_content['updateTime'] = desc.get('updateTime') or blog_content['publishTime']                    blog_content['author'] = desc.get('author') or '佚名'                    blog_content['type'] = desc.get('type') or 'md'                    blog_content['status'] = str(bg.status) or '1'                msg = dict(status='SUCCESS', message='', data=dict(blogList=blog_list, blogContent=blog_content))            else:                msg = dict(status='FAIL', message='分类信息不对!', data='')        elif do == 'single':            bid = self.get_argument('bid', None)            if bid is not None:                blog = yield self.project.get_project(p_type='knowledge.book', pid=bid)                blog_content = dict()                if blog:                    desc = json.loads(blog.config)                    if blog.status == 1 or (blog.status == 0 and desc.get('uid') == self.current_user.id):                        team = json.loads(blog.team or '{"upId": 0}')                        blog_content['bid'] = blog.id                        blog_content['title'] = desc.get('title')                        blog_content['blog'] = desc.get('blog')                        blog_content['uid'] = desc.get('uid')                        blog_content['cid'] = [team['upId'], blog.teamId]                        blog_content['publishTime'] = blog.createTime.strftime('%Y-%m-%d %H:%M:%S')                        blog_content['updateTime'] = desc.get('updateTime') or blog_content['publishTime']                        blog_content['author'] = desc.get('author') or '佚名'                        blog_content['type'] = desc.get('type') or 'md'                        blog_content['status'] = str(blog.status) or '1'                msg = dict(status='SUCCESS', message='', data=dict(blogContent=blog_content))            else:                msg = dict(status='FAIL', message='知识库信息不对!', data='')        elif do == 'search':            key_words = self.get_argument('keyWords', '')            blog, total = yield self.project.get_projects_list(p_type='knowledge.book', search=key_words)            blog_list = list()            for bg in blog:                desc = json.loads(bg.config)                if bg.status == 0 and desc.get('uid') != self.current_user.id:                    continue                blog_list.append(dict(id=str(bg.id), title=desc.get('title'), cid=bg.teamId,                                      updateTime = desc.get('updateTime') or bg.createTime.strftime('%Y-%m-%d %H:%M:%S'),                                      author = desc.get('author') or '佚名'))            msg = dict(status='SUCCESS', message='', data=dict(blogList=blog_list))        else:            msg = dict(status='FAIL', message='操作类型错误!', data='')        return msg    @gen.coroutine    def __get_cate(self):        cate = yield self.option.get_options_list(o_type='cate')        cate_list = list()        cate_dict = {0: dict(name='未分类', child=dict())}        all_cid = [ct.id for ct in cate]        for ct in cate:            desc = json.loads(ct.value)            up_id = desc.get('upId')            if up_id:                if up_id in cate_dict.keys():                    cate_dict[up_id]['child'][ct.id] = ct.name                elif up_id in all_cid:                    cate_dict[up_id] = dict(name=desc.get('upName'), child={ct.id: ct.name})                else:                    cate_dict[0]['child'][ct.id] = ct.name            else:                if up_id and up_id not in cate_dict.keys():                    cate_dict[up_id] = dict(name=ct.name, child=dict())        for cid in cate_dict.keys():            cate_list.append(dict(id=cid, name=cate_dict[cid]['name'], child=[dict(id=key, name=cate_dict[cid]['child'][key]) for key in cate_dict[cid]['child'].keys()]))        msg = dict(status='SUCCESS', message='', data=dict(bookCate=sorted(cate_list, key=lambda k: k['id'], reverse=True)))        return msg    @gen.coroutine    def __get_online(self, do='list'):        if do == 'list':            page = int(self.get_argument('page', 1))            size = int(self.get_argument('size', 10))            key_word = self.get_argument('keyWord', '').strip()            start_time = self.get_argument('startTime', None)            end_time = self.get_argument('endTime', None)            key = self.get_argument('key', None)            severity = self.get_argument('severity', '').strip()            tid = self.get_argument('tid', '').strip()            status = self.get_argument('status', '').strip()            if key:                online = yield self.project.get_project(pid=key if key.find('NEW_TEMP_KEY') == -1 else 0)                online = [online] if online else []                total = 1            else:                online, total = yield self.project.get_projects_list(                    p_type='knowledge.online', page=page, limit=size,                    start_time=start_time or None, end_time=end_time or None,                    team_id=tid or None, status=status or None, search=key_word or None)            data = []            no = 0            for ol in online:                desc = json.loads(ol.config)                if severity and desc.get('severity') not in [sry for sry in severity.split(',')]:                    continue                no += 1                data.append(                    dict(no=no + page * size - size, key=ol.id, tid=ol.teamId, foundTime=ol.createTime.strftime('%Y-%m-%d'),                         analyzeTime=desc.get('analyzeTime'), severity=desc.get('severity'),                         team=json.loads(ol.team).get('name'), module=desc.get('module'),                         requirement=desc.get('requirement'), publishTime=desc.get('publishTime'), bug=desc.get('bug'),                         effect=desc.get('effect'), solution=desc.get('solution'), attribution=desc.get('attribution'),                         cause=desc.get('cause'), answer=desc.get('answer'), status=ol.status,                         closeTime=desc.get('closeTime'), principal=desc.get('principal'),                         remarks=desc.get('remarks'), userId=desc.get('userId')))            msg = dict(status='SUCCESS', message='', data=dict(data=data, page=page, size=size, total=total))        else:            msg = dict(status='FAIL', message='操作类型错误!', data='')        return msg    @authenticated_async    @gen.coroutine    def post(self, op=None, do=None):        AddLogs().add_logs(ip=self.request.remote_ip, op_type='active')        data = yield self.get_request_body_to_json()        if op == 'online':            ret_msg = yield self.__edit_online(data, do)        elif op == 'cate':            ret_msg = yield self.__edit_cate(data, do)        elif op == 'book':            ret_msg = yield self.__edit_books(data, do)        else:            ret_msg = dict(status='FAIL', message='操作类型错误!', data='')        self.write_json(ret_msg)    @gen.coroutine    def __edit_books(self, data, do='edit'):        if do == 'edit':            desc = dict(title=data.get('title'), blog=data.get('blog'), uid=data.get('uid') or self.current_user.id, type=data.get('type') or 'md',                        updateTime=time.strftime('%Y-%m-%d %H:%M:%S'), author=data.get('author') or self.current_user.realname)            if str(data.get('key')).find('NEW_TEMP_KEY') != -1:                key, msg = yield self.project.add_project(                    p_type='knowledge.book', name=str(uuid.uuid1()),                    config=desc, team_id=data.get('cid'), status=data.get('status') or 1)                if key:                    if data.get('status') == '1':                        content = dict(project=dict(name=data.title.strip(),                                                    link='/knowledge/books/blog/{}/{}'.format(data.cid, key)),                                       template='分享了一篇知识《@{project}》')                        self.msg.add_message(user_id=self.current_user.id, m_type='active', content=content)                    ret_msg = dict(status='SUCCESS', message='新增成功!', data=dict(key=key))                else:                    ret_msg = dict(status='FAIL', message=msg, data='')            else:                res, msg = yield self.project.edit_project(                    p_type='knowledge.book', pid=data.get('key'), config=desc, team_id=data.get('cid'), status=data.get('status') or 1)                if res:                    ret_msg = dict(status='SUCCESS', message='编辑成功!', data=dict(key=data.get('key')))                else:                    ret_msg = dict(status='FAIL', message=msg, data='')        elif do == 'delete':            res, msg = yield self.project.delete_project(pid=data.key, p_type='knowledge.book')            if res:                ret_msg = dict(status='SUCCESS', message='删除成功!', data='')            else:                ret_msg = dict(status='FAIL', message=msg, data='')        else:            ret_msg = dict(status='FAIL', message='操作类型错误!', data='')        return ret_msg    @gen.coroutine    def __edit_cate(self, data, do='add'):        if do == 'add':            cate_one = yield self.option.get_option(name=data.get('cateOne'), o_type='cate')            if cate_one and not json.loads(cate_one.value).get('upId'):                cate_two = yield self.option.get_option(o_type='cate', name=data.get('cateTwo'))                if cate_two and json.loads(cate_two.value).get('upId'):                    ret_msg = dict(status='FAIL', message='二级分类已存在!', data='')                else:                    desc = dict(upName=cate_one.name, upId=cate_one.id)                    cid, msg = yield self.option.add_option(o_type='cate', name=data.get('cateTwo'), value=desc)                    if cid:                        ret_msg = dict(status='SUCCESS', message='新增成功!', data='')                    else:                        ret_msg = dict(status='FAIL', message=msg, data='')            else:                desc = dict(upName='', upId='')                cid, msg = yield self.option.add_option(o_type='cate', name=data.get('cateOne'), value=desc)                if cid:                    desc = dict(upName=data.get('cateOne'), upId=cid)                    cid, msg = yield self.option.add_option(o_type='cate', name=data.get('cateTwo'), value=desc)                    if cid:                        ret_msg = dict(status='SUCCESS', message='新增成功!', data='')                    else:                        ret_msg = dict(status='FAIL', message=msg, data='')                else:                    ret_msg = dict(status='FAIL', message=msg, data='')        elif do == 'delete':            res, msg = yield self.option.delete_option(o_type='cate', oid=data.get('cid'))            if res:                ret_msg = dict(status='SUCCESS', message='删除成功!', data='')            else:                ret_msg = dict(status='FAIL', message=msg, data='')        else:            ret_msg = dict(status='FAIL', message='操作类型错误!', data='')        return ret_msg    @gen.coroutine    def __edit_online(self, data, do='edit'):        if do == 'edit':            desc = dict(effect=data.get('effect'), severity=data.get('severity'), module=data.get('module'),                        requirement=data.get('requirement'), publishTime=data.get('publishTime'),                        analyzeTime=data.get('analyzeTime'), bug=data.get('bug'), attribution=data.get('attribution'),                        cause=data.get('cause'), remarks=data.get('remarks'), closeTime=data.get('closeTime'),                        answer=data.get('answer'), solution=data.get('solution'), foundTime=data.get('foundTime'),                        userId=data.get('userId') or self.current_user.id, principal=data.get('principal'))            if str(data.key).find('NEW_TEMP_KEY') != -1:                key, msg = yield self.project.add_project(                    p_type='knowledge.online', name=str(uuid.uuid1()), create_time=data.get('foundTime'),                    config=desc, status=data.status, team_id=data.get('tid'))                if key:                    ret_msg = dict(status='SUCCESS', message='新增成功!', data=dict(key=key))                else:                    ret_msg = dict(status='FAIL', message=msg, data='')            else:                res, msg = yield self.project.edit_project(p_type='knowledge.online', create_time=data.get('foundTime'),                    pid=data.key, config=desc, status=data.status or None, team_id=data.get('tid'))                if res:                    ret_msg = dict(status='SUCCESS', message='编辑成功!', data=dict(key=data.key))                else:                    ret_msg = dict(status='FAIL', message=msg, data='')        elif do == 'delete':            res, msg = yield self.project.delete_project(pid=data.key, p_type='knowledge.online')            if res:                ret_msg = dict(status='SUCCESS', message='删除成功!', data='')            else:                ret_msg = dict(status='FAIL', message=msg, data='')        else:            ret_msg = dict(status='FAIL', message='操作类型错误!', data='')        return ret_msg